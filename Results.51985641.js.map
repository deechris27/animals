{"version":3,"sources":["../Pet.js","../Results.js"],"names":["Pet","props","name","animal","breed","media","location","id","photos","photo","filter","hero","value","doggy","key","secret","Results","pets","setPets","loading","setLoading","pet","find","searchParams","output","then","data","dataPets","petfinder","Array","isArray","map","breeds","join","contact","city","state","ResultsContext","context"],"mappings":"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","file":"Results.51985641.js","sourceRoot":"..\\src\\public","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Pet(props) {\r\n\r\n    const {name, animal, breed, media, location, id} = props;\r\n    \r\n    let photos = [];\r\n\r\n    if(media && media.photos && media.photos.photo){\r\n        photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\r\n    }\r\n\r\n    let hero = \"http://placecorgi.com/300/300\";\r\n\r\n    if(photos[0] && photos[0].value){\r\n        hero = photos[0].value\r\n    }\r\n\r\n    return (\r\n      <Link to={`/details/${id}`} className=\"pet\">\r\n         <div className=\"image-container\">\r\n             <img src={hero} alt={name} />\r\n         </div>\r\n         <div className=\"info\">\r\n            <h1>{name}</h1>\r\n            <h2>{`${animal} -- ${breed} -- ${location}`}</h2>\r\n         </div>\r\n      </Link>\r\n    )\r\n}\r\n\r\nexport default Pet;\r\n","import React, {useState, useEffect} from 'react';\r\nimport pf from 'petfinder-client';\r\nimport {Consumer} from './SearchContext';\r\nimport Pet from './Pet';\r\nimport Loader from './components/Spinner';\r\n\r\nconst doggy = pf({\r\n    key: process.env.API_KEY,\r\n    secret: process.env.API_SECRET\r\n});\r\n\r\nfunction Results(props) {\r\n\r\n    const [pets, setPets] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(()=>{\r\n       search();\r\n    },[]);\r\n\r\n    function search(){\r\n        doggy.pet.find({\r\n            location: props.searchParams.location,\r\n            animal: props.searchParams.animal,\r\n            breed: props.searchParams.breed,\r\n            output: \"full\"\r\n         })\r\n         .then(data=>{\r\n             let pets;\r\n             let dataPets = data.petfinder.pets;\r\n             if(dataPets && dataPets.pet){\r\n                 pets = Array.isArray(dataPets.pet) ? dataPets.pet : [dataPets.pet];\r\n             }else{\r\n                 pets = [];\r\n             }\r\n\r\n             setPets(pets);\r\n             setLoading(false);\r\n         })\r\n    }\r\n\r\n    if(loading){\r\n        return <Loader loading={loading}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            {pets.map(pet=>{\r\n                let breed;\r\n                breed = Array.isArray(pet.breeds.breed) ? pet.breeds.breed.join(\", \") : pet.breeds.breed;\r\n                return(\r\n                   <Pet \r\n                    animal={pet.animal}\r\n                    key={pet.id}\r\n                    name={pet.name}\r\n                    breed={breed}\r\n                    media={pet.media}\r\n                    location={`${pet.contact.city}, ${pet.contact.state}`}\r\n                    id={pet.id}\r\n                   />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function ResultsContext(props){\r\n    return (\r\n        <Consumer>\r\n            {context => <Results {...props} searchParams={context} />}\r\n        </Consumer>\r\n    )\r\n}\r\n"]}